@model SupperClub.Models.CreditCardDetailsViewModel
@{
    ViewBag.Title = "Payment Details";
}

@section PageSpecificScripts {
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
    <link rel="stylesheet" href="@Url.Content("~/Content/css/shortcodes.css")">
    <script type="text/javascript">
    function initialize()
    {
    @Html.Raw(string.Format("var mapCenter = new google.maps.LatLng({0}, {1});", Model.Event.Latitude.ToString("F3"), Model.Event.Longitude.ToString("F3")))

        var mapOptions = {
            zoom: 13,
            maxZoom: 15,
            scrollwheel: true,
            zoomControl: true,
            streetViewControl: false,
            disableDefaultUI: false,
            panControl:true,
            center: mapCenter,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var map = new google.maps.Map(document.getElementById('map-single-pin'), mapOptions);
        google.maps.event.addDomListener(window, 'load', initialize);
        var marker = new google.maps.Marker({
            map: map,
            @Html.Raw(string.Format("position : new google.maps.LatLng({0}, {1}),", Model.Event.Latitude.ToString("F3"), Model.Event.Longitude.ToString("F3")))
            title: ''
        });
    var circle = new google.maps.Circle({
        map: map,
        @Html.Raw(string.Format("radius: {0},", SupperClub.Code.ServerMethods.GoogleMapsCircleRadius))    // metres
        strokeWeight:1,
        strokeColor:'#AA0000',
        clickable: false,
    editable: false,
    fillColor: '#AA0000',
    fillOpacity: 0.2,
    strokeOpacity:0.1
    });
    circle.bindTo('center', marker, 'position');
    marker.setVisible(true);
    };
        function isPhoneNumber(evt) {
            //debugger;
            evt = (evt) ? evt : window.event;
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            if ( ((charCode!=40  && charCode !=41 && charCode !=43 && charCode !=45) && (charCode > 31 && charCode < 48 || charCode > 57))) {
                return false;
            }
            return true;
        }
        $(document).ready(function () {
            //debugger;
            checkAndEnableBuyTickets();
            function showErrorPopup(errorMsg)
            {
                $(".message-popup-wraper .messages-popup").addClass("is-hidden");
                $("#errorMsgText").text(errorMsg);
                $(".messages-popup--added").clone().appendTo(".message-popup-wraper").addClass("is-active").delay(20000).queue(function () { $(this).remove() }),
                $(".messages-popup").on("click", function () { $(this).addClass("is-hidden") });
                //$("#btnBuyTickets").prop( "disabled", true );
            }
            if(@Model.bookingModel.voucherId == 0)
            {
                $("#sideBarVoucherDescription").hide();
            }
            $('#creditCardDetails_CardType').change(function () {
                if ($(this).val() == "MAESTRO") {
                    $("#Maestro").show();
                }
                else {
                    $("#Maestro").hide();
                }
            });
            $("#chkTerms").change(function () {
                ////debugger;
                checkAndEnableBuyTickets();
            });
            $("#contactNum").on("blur", function () {
                var phNum = $("#contactNum").val();
                $("#ContactNumber").val(phNum);
            });
            $("#creditCardDetailsForm").submit(function () {
                //debugger
                var cardType = $('#creditCardDetails_CardType option:selected').val();
                if (cardType == null || cardType.length <= 0) {
                    showErrorPopup("Please select a card type!");
                    return false;
                }
                
                var cnr = "@Model.Event.ContactNumberRequired";
                var phone = $("#contactNum").val();
                if (cnr.toUpperCase() == "TRUE" && phone.length <= 0) {
                    showErrorPopup("Contact number is required!");
                    return false;
                }
                //if (phone.length > 0) {
                //    if (!CheckPhoneNumber(phone)) {
                //        showErrorPopup("Please enter a 11 digit phone number. The number entered is not in a valid format.");
                //        return false;
                //    }
                //}
                return true;
            });

            function CheckPhoneNumber(phoneNumber) {
                var regex1 = /^\(?(?:(?:0(?:0|11)\)?[\s-]?\(?|\+)44\)?[\s-]?\(?(?:0\)?[\s-]?\(?)?|0)(?:\d{2}\)?[\s-]?\d{4}[\s-]?\d{4}|\d{3}\)?[\s-]?\d{3}[\s-]?\d{3,4}|\d{4}\)?[\s-]?(?:\d{5}|\d{3}[\s-]?\d{3})|\d{5}\)?[\s-]?\d{4,5}|8(?:00[\s-]?11[\s-]?11|45[\s-]?46[\s-]?4\d))(?:(?:[\s-]?(?:x|ext\.?\s?|\#)\d+)?)$/;
                return regex1.test(phoneNumber);
            }
            function checkAndEnableBuyTickets() {
                //debugger;
                if ($("#chkTerms")[0].checked == true) {
                    $("#btnBuyTickets").prop("disabled", false);
                }
                else {
                    $("#btnBuyTickets").prop("disabled", true);
                }
            }
        });
    </script>
}

<div class="container payment-forms">
    <div class="layout layout--rev">
        <div class="layout__item large-and-up-1/3 payment-forms__sidebar">
            <div class="bgr-white">
                @*<a href="@(SupperClub.Code.ServerMethods.ServerUrl + Model.Event.UrlFriendlyName + "/" + Model.Event.Id.ToString())">*@
                    <img src="@Url.Content("~/Content/images/Events/")@Model.Event.ImagePath" alt="" class="full-width" style="height:195px; width:297px;">
                @*</a>*@
                <div class="p-">
                    @*<a href="@(SupperClub.Code.ServerMethods.ServerUrl + Model.Event.UrlFriendlyName + "/" + Model.Event.Id.ToString())">*@
                        <h2 class="h4 line-height-1-35">@Model.Event.Name Supper Club</h2>
                    @*</a>*@
                    @*<a href="@(SupperClub.Code.ServerMethods.ServerUrl + Model.Event.SupperClub.UrlFriendlyName)">*@
                        <span class='pr--'>Hosted By @Model.Event.SupperClub.Name </span>
                    @*</a>*@
                    <ul class="rating inline-block">
                        @for (int i = 0; i < 5; i++)
                        {
                            if (i < @Model.Event.SupperClub.AverageRank)
                            {
                                <li class="is-checked">
                                    <svg role="img" class="icon ">
                                        <use xlink:href="@Url.Content("~/Content/images/")icons.svg#icon-star"></use>
                                    </svg>
                                </li>
                            }
                            else
                            {
                                <li class="">
                                    <svg role="img" class="icon ">
                                        <use xlink:href="@Url.Content("~/Content/images/")icons.svg#icon-star"></use>
                                    </svg>
                                </li>
                            }
                        }
                    </ul>

                    <p class="mb--">@Model.Event.PostCode.Split(new string[] { " " }, StringSplitOptions.None)[0] - <a id="showMapLink" style="display:block;" href="#map-single-pin-wrap" class="color-gray open-popup">View on map</a></p>
                    <hr class="hr hr--dots mb-">
                    <div class="flag flag--small mb--">
                        <div class="flag__img">

                            <svg role="img" class="icon color-blue icon--19x19 mr--">
                                <use xlink:href="@Url.Content("~/Content/images/")icons.svg#icon-medium_calendar"></use>
                            </svg>
                        </div>
                        <div class="flag__body">
                            <label class="relative datepicker-wrap display-block">
                                @Model.Event.Start.ToString("ddd, d MMM yyyy")
                            </label>
                        </div>
                    </div>
                    <div class="flag flag--small mb-">
                        <div class="flag__img">

                            <svg role="img" class="icon color-blue icon--19x19 mr--">
                                <use xlink:href="@Url.Content("~/Content/images/")icons.svg#icon-mediuml_clock"></use>
                            </svg>
                        </div>
                        <div class="flag__body">
                            @if (@Model.Event.MultiSeating)
                            {
                                var sTime = Model.Event.EventSeatings.Min(x => x.Start).ToShortTimeString();
                                <span id="litSeatingTime">@sTime Onwards </span>
                            }
                            else
                            {
                                <span id="litSeatingTime">@Model.Event.Start.ToShortTimeString()</span>
                            }

                        </div>
                    </div>
                    <hr class="hr hr--dots">
                    <div class="justifize">
                        <div class="justifize__box">
                            <span class='type-bold type-x-huge color-dark line-height-1-15'>Total £</span>
                            <span class='type-bold type-x-huge color-dark line-height-1-15' name="totalPrice">@Html.DisplayFor(x => x.bookingModel.totalAfterDiscount)</span>
                            
                        </div>
                        @if (Model.Event.Alcohol == true)
                        {
                            <div class="justifize__box">
                                <span class='type-bold h4 color-dark tooltip-wrap line-height-1-15'>
                                    <svg role="img" class="icon icon--7x19">
                                        <use xlink:href="@Url.Content("~/Content/images/")icons.svg#icon-small_botle"></use>
                                    </svg>
                                    BYOB <div class="tooltip">Bring your own beers</div>
                                </span>
                            </div>
                        }
                    </div>
                    @*<button class="btn btn--primary btn--gray-light btn--full btn--h44 color-dark mb-">Apply / Update</button>*@
                    <hr class="hr hr--dots mb--">
                    <div id="sideBarVoucherDescription">
                        <span class="btn btn--primary btn--gray-red btn--full btn--h44 color-dark mb-" id="lblSideBarVD">@Model.bookingModel.voucherDescription</span>
                    </div>
                </div>

            </div>

        </div>

        <div class="layout__item large-and-up-2/3">
            @if (ViewBag.Notification != null)
            {
                @Html.Partial("_Notification", (SupperClub.Models.NotificationModel)ViewBag.Notification)
            }
            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "creditCardDetailsForm" }))
                {
                    <p style="margin-top:20px;">@Html.ValidationSummary()</p>

                    @Html.HiddenFor(x => x.bookingModel.eventId)
                    @Html.HiddenFor(x => x.bookingModel.numberOfTickets)
                    @Html.HiddenFor(x => x.bookingModel.IsContactNumberRequired)

                    <h1 class="type-light line-height-1-15 mb">Payment</h1>
                    <div class="large-and-up-ph++ medium-ph+ ph- mb+">
                        <p class="type-semibold color-darken mb--">Card Type *</p>
                        <div class="large-and-up-pr++ mb-">
                            <div class="select select--medium select--full inline-block">
                                @Html.ValidationMessageFor(m => m.creditCardDetails.CardType)
                                @Html.DropDownListFor(m => m.creditCardDetails.CardType, Model.CreditCardTypes, "Select", new { @class = "select__item pl" })
                                <div class="select__icon">
                                    <span class="triangle triangle--down triangle--center triangle--absolute"></span>

                                </div>
                            </div>
                        </div>
                        <p class="type-semibold color-darken mb--">Name on Card *</p>
                        @Html.ValidationMessageFor(m => m.creditCardDetails.CardHolder)
                        @Html.EditorFor(m => m.creditCardDetails.CardHolder, new { @class = "input--primary input--full input--h42 mb-" })

                        <p class="type-semibold color-darken mb--">Card Number *</p>
                        @Html.ValidationMessageFor(m => m.creditCardDetails.CreditCardNumber)
                        @Html.EditorFor(m => m.creditCardDetails.CreditCardNumber, new { @class = "input--primary input--full input--h42 mb-" })

                        <div class=" justifize">
                            <div class="justifize__box">
                                <p class="type-semibold color-darken mb--">Expiry Date (MM/YY) *</p>
                                <p>@Html.ValidationMessageFor(m => m.creditCardDetails.ExpiryMonth)</p>
                                <p>@Html.ValidationMessageFor(m => m.creditCardDetails.ExpiryYear)</p>
                                    <div>
                                        @Html.TextBoxFor(m => m.creditCardDetails.ExpiryMonth, new { @class = "input--primary input--number", style = "max-width: 50px; display: inline", placeholder = "MM" })
                                        <span>/</span>
                                        @Html.TextBoxFor(m => m.creditCardDetails.ExpiryYear, new { @class = "input--primary input--number", style = "max-width: 50px; display: inline", placeholder = "YY" })

                                    </div>
</div>
                            <div class="justifize__box">
                                <p class="type-semibold color-darken mb--">
                                    CV2 Number * 
                                    @*<span class='tooltip-wrap'>
                                        <span class="icon-wrap">
                                            <svg role="img" class="icon icon--5x9 color-white">
                                                <use xlink:href="@Url.Content("~/Content/images/")icons.svg#icon-question_mark"></use>
                                            </svg>
                                        </span> <span class="tooltip">The 3 digit security number on the back of your card</span>
                                    </span>*@
                                </p>
                                @Html.ValidationMessageFor(m => m.creditCardDetails.CV2)
                                <div>
                                    @Html.TextBoxFor(m => m.creditCardDetails.CV2, new { @class = "input--primary input--number", placeholder = "xxx" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <h2 class="h1 type-light line-height-1-15 mb">Billing Address</h2>
                    <div class="large-and-up-ph++ medium-ph+ ph-">
                        <p class="type-semibold color-darken mb--">Address Line 1 *</p>
                        @Html.ValidationMessageFor(m => m.creditCardDetails.Address1)
                        @Html.TextBoxFor(m => m.creditCardDetails.Address1, new { @class = "input--primary input--full input--h42 type-semibold mb-", placeholder = "Address Line 1" })

                        <p class="type-semibold color-darken mb--">Address Line 2</p>
                        @Html.ValidationMessageFor(m => m.creditCardDetails.Address2)
                        @Html.TextBoxFor(m => m.creditCardDetails.Address2, new { @class = "input--primary input--full input--h42 type-semibold mb-", placeholder = "Address Line 2" })

                        <p class="type-semibold color-darken mb--">City *</p>
                        @Html.ValidationMessageFor(m => m.creditCardDetails.City)
                        @Html.TextBoxFor(m => m.creditCardDetails.City, new { @class = "input--primary input--full input--h42 type-semibold mb-", placeholder = "City" })

                        <p class="type-semibold color-darken mb--">Post Code *</p>
                        @Html.ValidationMessageFor(m => m.creditCardDetails.PostCode)
                        @Html.TextBoxFor(m => m.creditCardDetails.PostCode, new { @class = "input--primary input--full input--h42 type-semibold mb-", placeholder = "PostCode" })

                        <p class="type-semibold color-darken mb--">Country *</p>
                        @Html.ValidationMessageFor(m => m.creditCardDetails.Country)
                        @Html.TextBoxFor(m => m.creditCardDetails.Country, new { @class = "input--primary input--full input--h42 type-semibold mb-", placeholder = "Country" })

                        <p class="type-semibold color-darken mb--">Contact Number *</p>
                        @Html.ValidationMessageFor(m => m.ContactNumber)
                        <input type="text" class="input--primary input--full input--h42 type-semibold mb-" onkeypress="return isPhoneNumber(event);" placeholder='Contact Number' id="contactNum" value="@Model.ContactNumber" />
                        @Html.HiddenFor(m => m.ContactNumber)

                        <div class="terms-wrapper mb-">
                            <label class="chooser ">
                                <div class="flag flag--flush flag--fix">
                                    <div class="flag__img">
                                        <input class="chooser__input" type="checkbox" id="chkTerms" name="chkTerms1" value="Menu A">
                                        <span class="chooser__icon">

                                            <svg role="img" class="icon ">
                                                <use xlink:href="@Url.Content("~/Content/images/")icons.svg#icon-check_box"></use>
                                            </svg>
                                        </span>
                                    </div>
                                    <div class="flag__body">
                                        <span class="chooser__label color-gray-7 inline-block align-middle ml-"> I agree to the <a class='color-gray-7 text-underline' href='/Home/TermsAndConditions'>Terms and Conditions</a> </span>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <button type="submit" id="btnBuyTickets" class="btn btn--primary btn--full btn--h54 mb++">Buy Tickets</button>
                    </div>
                }           
        </div>
</div>
</div>
        <div id="map-single-pin-wrap" class="map--single-pin-wrap mfp-hide magnific-content">
            <div id="map-single-pin" class="map--single-pin map--popup"></div>
            <button title="Close (Esc)" type="button" class="mfp-close">
                <span>
                    <svg role="img" class="icon">
                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/content/images/icons/icons.svg#icon-X-close"></use>
                    </svg>
                </span>
            </button>
        </div>

<div class="message-popup-wraper text-center"></div>
<span class="messages-popup messages-popup--added">
    <img src="../content/images/icons/warning2.png" />
    <span id="errorMsgText"></span>
</span>
<span class="messages-popup messages-popup--removed">
    <img src="../content/images/icons/voucher.png" />
    Successfully applied voucher to your cart.
</span>
