//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using DataAnnotationsExtensions;
using SupperClub.Domain.Repository;

namespace SupperClub.Domain
{
    public class User
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
        public virtual string DietaryPreferences
        {
            get;
            set;
        }
        [DataType(DataType.DateTime)]
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:dd/MM/yyyy}")]
        [Display(Prompt = "dd/mm/yyyy")]
        public virtual Nullable<System.DateTime> DateOfBirth
        {
            get;
            set;
        }
    
        public virtual string Address
        {
            get;
            set;
        }
    
        public virtual string Country
        {
            get;
            set;
        }
    
        public virtual string PostCode
        {
            get;
            set;
        }

        public virtual string Gender
        {
            get;
            set;
        }
        [DataType(DataType.PhoneNumber,ErrorMessage="Please enter a valid phone number.")]
        public virtual string ContactNumber
        {
            get;
            set;
        }
        public string FacebookId
        {
            get;
            set;
        }

        public string FBJson
        {
            get;
            set;
        }

        public bool FBUserOnly
        {
            get;
            set;
        }



        /// <summary>
        /// Returns number of positively ranked events
        /// </summary>
        public int PositiveRanking
        {
            get
            {
                int ranking = 0;
                foreach(EventAttendee e in this.EventAttendees)
                {
                    if(e.UserRanking != null && e.UserRanking > 0)
                        ranking += (int)e.UserRanking; //Ranking is thumbs up +1, thumbs down -1
                }
                return ranking;
            }
        }

        /// <summary>
        /// Returns number of negatively ranked events
        /// </summary>
        public int NegativeRanking
        {
            get
            {
                int ranking = 0;
                foreach (EventAttendee e in this.EventAttendees)
                {
                    if (e.UserRanking != null && e.UserRanking < 0)
                        ranking += (int)e.UserRanking;
                }
                return ranking;
            }
        }

        /// <summary>
        /// Returns total number of events where a ranking has been given
        /// </summary>
        public int NumberRankedEvents
        {
            get
            {
                int numberRanks = 0;
                foreach (EventAttendee e in this.EventAttendees)
                {
                    if (e.UserRanking != null)
                        numberRanks++;
                }
                return numberRanks;
            }
        }

        public string Email
        {
            get
            {
                if (this.aspnet_Users == null)
                    return string.Empty;
                return this.aspnet_Users.aspnet_Membership.Email;
            }
        }

        public bool Locked
        {
            get
            {
                if (this.aspnet_Users == null)
                    return false;
                return this.aspnet_Users.aspnet_Membership.IsLockedOut;
            }
        }
        public virtual List<Event> UserEvents
        {
            get
            {
                if (userEvents != null && userEvents.Count == 0)
                {
                    List<int> lstEventIds = new List<int>();
                    if (this.EventAttendees != null)
                    {
                        foreach (EventAttendee ea in this.EventAttendees)
                        {
                            if (!lstEventIds.Contains(ea.EventId))
                            {
                                userEvents.Add(ea.Event);
                                lstEventIds.Add(ea.EventId);
                            }
                        }
                    }
                }
                return userEvents;
            }
            set
            {
                userEvents = value;
            }
        }
        private List<Event> userEvents = new List<Event>();

        public List<Event> FutureEvents
        {
            get
            {
                return this.UserEvents.FindAll(x => x.Start > DateTime.Now);
            }
        }

        public List<Event> PastEvents
        {
            get
            {
                return this.UserEvents.FindAll(x => x.Start < DateTime.Now);
            }
            
        }

        public virtual List<int> WishListedEventIds
        {
            get
            {

                if (wishListedEventIds != null && wishListedEventIds.Count == 0)
                {
                    
                    if (this.WishlistedEvents != null)
                    {
                        foreach (UserFavouriteEvent ufe in this.WishlistedEvents)
                        {
                            wishListedEventIds.Add(ufe.EventId);                            
                        }
                    }
                }
                return wishListedEventIds;
            }
            set
            {
                wishListedEventIds = value;
            }
        }
        private List<int> wishListedEventIds = new List<int>();
        #endregion

       
        #region Navigation Properties

        public virtual aspnet_Users aspnet_Users { get; set; }

        public virtual SegmentUser SegmentUser { get; set; }

        public virtual List<TicketBasket> TicketBaskets { get; set; }

        public virtual List<Review> Reviews { get; set; }        

        public virtual List<UserFavouriteEvent> WishlistedEvents { get; set; }

        public virtual List<UserFavouriteSupperClub> FollowedSupperClubs { get; set; }

        public virtual List<Ticket> Tickets { get; set; }
        //public virtual List<UserInvitee> UserInvitees { get; set; }

        public virtual ICollection<EventAttendee> EventAttendees
        {
            get
            {
                if (_eventAttendees == null)
                {
                    var newCollection = new FixupCollection<EventAttendee>();
                    newCollection.CollectionChanged += FixupEventAttendees;
                    _eventAttendees = newCollection;
                }
                return _eventAttendees;
            }
            set
            {
                if (!ReferenceEquals(_eventAttendees, value))
                {
                    var previousValue = _eventAttendees as FixupCollection<EventAttendee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEventAttendees;
                    }
                    _eventAttendees = value;
                    var newValue = value as FixupCollection<EventAttendee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEventAttendees;
                    }
                }
            }
        }
        private ICollection<EventAttendee> _eventAttendees;
    
        public virtual ICollection<SupperClub> SupperClubs
        {
            get
            {
                if (_supperClubs == null)
                {
                    var newCollection = new FixupCollection<SupperClub>();
                    newCollection.CollectionChanged += FixupSupperClubs;
                    _supperClubs = newCollection;
                }
                return _supperClubs;
            }
            set
            {
                if (!ReferenceEquals(_supperClubs, value))
                {
                    var previousValue = _supperClubs as FixupCollection<SupperClub>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSupperClubs;
                    }
                    _supperClubs = value;
                    var newValue = value as FixupCollection<SupperClub>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSupperClubs;
                    }
                }
            }
        }
        private ICollection<SupperClub> _supperClubs;
    
        public virtual ICollection<UserUsageStatistic> UserUsageStatistics
        {
            get
            {
                if (_userUsageStatistics == null)
                {
                    var newCollection = new FixupCollection<UserUsageStatistic>();
                    newCollection.CollectionChanged += FixupUserUsageStatistics;
                    _userUsageStatistics = newCollection;
                }
                return _userUsageStatistics;
            }
            set
            {
                if (!ReferenceEquals(_userUsageStatistics, value))
                {
                    var previousValue = _userUsageStatistics as FixupCollection<UserUsageStatistic>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserUsageStatistics;
                    }
                    _userUsageStatistics = value;
                    var newValue = value as FixupCollection<UserUsageStatistic>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserUsageStatistics;
                    }
                }
            }
        }
        private ICollection<UserUsageStatistic> _userUsageStatistics;
    
        public virtual ICollection<UserSearch> UserSearches
        {
            get
            {
                if (_userSearches == null)
                {
                    var newCollection = new FixupCollection<UserSearch>();
                    newCollection.CollectionChanged += FixupUserSearches;
                    _userSearches = newCollection;
                }
                return _userSearches;
            }
            set
            {
                if (!ReferenceEquals(_userSearches, value))
                {
                    var previousValue = _userSearches as FixupCollection<UserSearch>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserSearches;
                    }
                    _userSearches = value;
                    var newValue = value as FixupCollection<UserSearch>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserSearches;
                    }
                }
            }
        }
        private ICollection<UserSearch> _userSearches;

        #endregion
        #region Association Fixup
    
        private void FixupEventAttendees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EventAttendee item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EventAttendee item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupSupperClubs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SupperClub item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SupperClub item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserUsageStatistics(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserUsageStatistic item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserUsageStatistic item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserSearches(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserSearch item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserSearch item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }

        #endregion
    }
}
