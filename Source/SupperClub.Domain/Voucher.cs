//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using DataAnnotationsExtensions;

namespace SupperClub.Domain
{
    public enum VoucherState
    {
        NoBalance = -6,
        BasketValueLowerThanRequired = -5,
        UsageCapReached = -4,
        RedemptionLimitExhausted = -3,
        NotApplicableForThisBasket = -2,
        Expired = -1,
        Invalid = 0
    }
    public enum VoucherType
    {
        PercentageOff = 1,
        ValueOff = 2,
        FreeOffer = 3,
        PartialPercentOff = 4,
        GiftVoucher=5
    }
    public enum VoucherOwner
    {
        Host = 1,
        Admin = 2
    }
    public class Voucher
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }

        [Display(Name = "Voucher Code")]
        [Required(ErrorMessage = "Voucher Code is Required")]
        [StringLength(20, MinimumLength = 7, ErrorMessage= "Voucher code should be ateast 7 character long")]
        public virtual string Code
        {
            get;
            set;
        }
        [Display(Name = "Voucher Description")]
        [Required(ErrorMessage = "Voucher description is Required")]
        public virtual string Description
        {
            get;
            set;
        }
        
        public virtual int OwnerId
        {
            get;
            set;
        }

        public virtual string HostName
        {
            get;
            set;
        }

        [Display(Name = "Voucher Type")]
        public virtual int TypeId
        {
            get;
            set;
        }
        public virtual bool Active
        {
            get;
            set;
        }
        public virtual bool IsGlobal
        {
            get;
            set;
        }
        [Display(Name = "Voucher Value")]        
        public virtual Nullable<decimal> OffValue
        {
            get;
            set;
        }
        public virtual Nullable<int> TotalBooking
        {
            get;
            set;
        }
        public virtual Nullable<int> FreeBooking
        {
            get;
            set;
        }
        public virtual Nullable<decimal> AvailableBalance
        {
            get;
            set;
        }
        [Display(Name = "Minimum booking amount required to redeem this voucher")]
        [Numeric]
        [Min(0, ErrorMessage = "Please provide a valid value for minimum booking amount")]
        public virtual decimal MinBookingAmount
        {
            get;
            set;
        }

        [Display(Name = "Voucher usage cap*")]
        [Integer]
        [Min(0, ErrorMessage = "Please provide a valid number for voucher usage cap")]
        public virtual int UsageCap        
        {
            get;
            set;
        }
        public virtual int NumberOfTimesUsed
        {
            get;
            set;
        }
        [Display(Name = "Voucher Expiry Date")]
        public virtual Nullable<DateTime> ExpiryDate
        {
            get;
            set;
        }
        [Display(Name = "Voucher Start Date")]
        public virtual Nullable<DateTime> StartDate
        {
            get;
            set;
        }
        public virtual DateTime CreatedDate
        {
            get;
            set;
        }

        // To restrict usage of a voucher for a user to certain number of times, unlimited if set to zero
        [Display(Name = "How many times a single guest account redeem this voucher?")]
        public virtual int UniqueUserRedeemLimit
        {
            get;
            set;
        }
        //[Display(Name = "Apply to all events")]
        public virtual bool ApplyToAll
        {
            get
            {
                return applyToAll;
            }
            set
            {
                applyToAll = value;
            }
        }
        private bool applyToAll = false;

        public virtual string EventList
        {
            get
            {
                if (eventList == null || eventList == "")
                {
                    eventList = "";
                    if (this.EventVouchers != null)
                    {
                        foreach (EventVoucher ev in this.EventVouchers)
                            eventList += ev.EventId.ToString() + ",";
                        if (eventList.Length > 0)
                            eventList = eventList.Substring(0, eventList.Length - 1);
                    }
                }
                return eventList;
            }
            set
            {
                eventList = value;
            }
        }
        private string eventList;

        public virtual string SupperClubList
        {
            get
            {
                if (supperClubList == null || supperClubList == "")
                {
                    supperClubList = "";
                    if (this.EventVouchers != null)
                    {
                        foreach (EventVoucher ev in this.EventVouchers)
                            supperClubList += ev.EventId.ToString() + ",";
                        if (supperClubList.Length > 0)
                            supperClubList = supperClubList.Substring(0, supperClubList.Length - 1);
                    }
                }
                return supperClubList;
            }
            set
            {
                supperClubList = value;
            }
        }
        private string supperClubList;
        #endregion
        #region Navigation Properties
    
        public virtual ICollection<EventVoucher> EventVouchers
        {
            get
            {
                if (_eventVouchers == null)
                {
                    var newCollection = new FixupCollection<EventVoucher>();
                    newCollection.CollectionChanged += FixupEventVouchers;
                    _eventVouchers = newCollection;
                }
                return _eventVouchers;
            }
            set
            {
                if (!ReferenceEquals(_eventVouchers, value))
                {
                    var previousValue = _eventVouchers as FixupCollection<EventVoucher>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEventVouchers;
                    }
                    _eventVouchers = value;
                    var newValue = value as FixupCollection<EventVoucher>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEventVouchers;
                    }
                }
            }
        }
        private ICollection<EventVoucher> _eventVouchers;

        public virtual ICollection<SupperClubVoucher> SupperClubVouchers
        {
            get
            {
                if (_supperClubVouchers == null)
                {
                    var newCollection = new FixupCollection<SupperClubVoucher>();
                    newCollection.CollectionChanged += FixupSupperClubVouchers;
                    _supperClubVouchers = newCollection;
                }
                return _supperClubVouchers;
            }
            set
            {
                if (!ReferenceEquals(_supperClubVouchers, value))
                {
                    var previousValue = _supperClubVouchers as FixupCollection<SupperClubVoucher>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSupperClubVouchers;
                    }
                    _supperClubVouchers = value;
                    var newValue = value as FixupCollection<SupperClubVoucher>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSupperClubVouchers;
                    }
                }
            }
        }
        private ICollection<SupperClubVoucher> _supperClubVouchers;
        #endregion
        #region Association Fixup

        private void FixupEventVouchers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EventVoucher item in e.NewItems)
                {
                    item.Voucher = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EventVoucher item in e.OldItems)
                {
                    if (ReferenceEquals(item.Voucher, this))
                    {
                        item.Voucher = null;
                    }
                }
            }
        }

        private void FixupSupperClubVouchers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SupperClubVoucher item in e.NewItems)
                {
                    item.Voucher = this;
                }
            }

            if (e.OldItems != null)
            {
                foreach (SupperClubVoucher item in e.OldItems)
                {
                    if (ReferenceEquals(item.Voucher, this))
                    {
                        item.Voucher = null;
                    }
                }
            }
        }


        #endregion

        #region Validation Business Rules

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (TypeId == (int)VoucherType.PercentageOff)
            {
                if(OffValue < 0 || OffValue > 100)
                    yield return new ValidationResult("The percentage off can be only between 0 and 100.", new[] { "OffValue" });
            }
            if (TypeId == (int)VoucherType.ValueOff)
            {
                if (OffValue > MinBookingAmount)
                    yield return new ValidationResult("The voucher off value can not be more than the booking amount.", new[] { "OffValue" });
            }

            if (StartDate != null && StartDate < DateTime.Now) // Only apply this validation to new Events (Updates are exempt)
                yield return new ValidationResult("Start date must be in future", new[] { "StartDate" });

            if (ExpiryDate != null && ExpiryDate <= DateTime.Now) // Only apply this validation to new Events (Updates are exempt)
                yield return new ValidationResult("Expiry date must be in future", new[] { "ExpiryDate" });

            if (StartDate != null && ExpiryDate != null && StartDate > ExpiryDate)
                yield return new ValidationResult("Start Date can not be after expiry date", new[] { "StartDate" });

            
        }

        #endregion
    }
}
